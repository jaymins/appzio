<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\tickers\controllers\base;

use backend\controllers\CrudBaseController;
use backend\modules\tickers\models\AeExtTicker;
use backend\modules\tickers\search\AeExtTicker as AeExtTickerSearch;
use dmstr\bootstrap\Tabs;
use yii\helpers\Url;
use yii\web\HttpException;

/**
 * AeExtTickerController implements the CRUD actions for AeExtTicker model.
 */
class AeExtTickerController extends CrudBaseController
{

    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all AeExtTicker models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new AeExtTickerSearch;
        $dataProvider = $searchModel->search($_GET);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }

    /**
     * Displays a single AeExtTicker model.
     * @param string $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new AeExtTicker model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new AeExtTicker;

        try {
            
            if ( \Yii::$app->request->isPost AND $model->load($_POST) ) {
                // $model->exchange = preg_replace('~::.*~', '', $model->exchange);

                if ( $model->save() ) {
                    return $this->redirect(['view', 'id' => $model->id]);
                } else {
                    $model->load($_GET);
                }
            } else {
                $model->load($_GET);
            }

        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }

        return $this->render('create', [
            'model' => $model,
            'exchanges' => $this->getExchanges(),
        ]);
    }

    /**
     * Updates an existing AeExtTicker model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing AeExtTicker model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

        // TODO: improve detection
        $isPivot = strstr('$id', ',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
     * Finds the AeExtTicker model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return AeExtTicker the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AeExtTicker::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }

    protected function getExchanges() {
        return [
            'US::0-9' => 'USA Stocks ( 0 - 9 )',
            'US::a-e' => 'USA Stocks ( A - E )',
            'US::f-j' => 'USA Stocks ( F - J )',
            'US::k-o' => 'USA Stocks ( K - O )',
            'US::p-t' => 'USA Stocks ( P - T )',
            'US::u-z' => 'USA Stocks ( U - Z )',
            'LSE' => 'London Exchange',
            'V' => 'TSX Venture Exchange',
            'TO' => 'Toronto Exchange',
            'BE' => 'Berlin Exchange',
            'F' => 'Frankfurt Exchange',
            'STU' => 'Stuttgart Exchange',
            'MU' => 'Munich Exchange',
            'HA' => 'Hanover Exchange',
            'HM' => 'Hamburg Exchange',
            'XETRA' => 'XETRA Exchange',
            'DU' => 'Dusseldorf Exchange',
            'VI' => 'Vienna Exchange',
            'MI' => 'Borsa Italiana',
            'PA' => 'Euronext Paris',
            'BR' => 'Euronext Brussels',
            'MC' => 'Madrid Exchange',
            'VX' => 'Swiss Exchange',
            'LS' => 'Euronext Lisbon',
            'SW' => 'SIX Swiss Exchange',
            'AS' => 'Euronext Amsterdam',
            'IC' => 'Iceland Exchange',
            'IR' => 'Irish Exchange',
            'CO' => 'Coppenhagen Exchange',
            'OL' => 'Oslo Stock Exchange',
            'ST' => 'Stockholm Exchange',
            'HE' => 'Helsinki Exchange',
            'NB' => 'Nasdaq Baltic',
            'NFN' => 'Nasdaq First North',
            'HK' => 'Hong Kong Exchange',
            'TA' => 'Tel Aviv Exchange',
            'AU' => 'Australia Exchange',
            'MCX' => 'MICEX Russia',
            'BUD' => 'Budapest Stock Exchange',
            'IS' => 'Istanbul Stock Exchange',
            'NZ' => 'New Zealand Exchange',
            'WAR' => 'Warsaw Stock Exchange',
            'KO' => 'Korea Stock Exchange',
            'NX' => 'ETF-Euronext',
            'SG' => 'Singapore Exchange',
            'BSE' => 'Bombay Exchange',
            'NSE' => 'NSE (India)',
            'BK' => 'Thailand Exchange',
            'SHE' => 'Shenzhen Exchange',
            'TSE' => 'Tokyo Stock Exchange',
            'KAR' => 'Karachi Stock Exchange',
            'SR' => 'Saudi Arabia Exchange',
            'JSE' => 'Johannesburg Exchange',
            'SHG' => 'Shanghai Exchange',
            'JK' => 'Jakarta Exchange',
            'KLSE' => 'Kuala Lumpur Exchange',
            'SA' => 'Sao Paolo Exchange',
            'MX' => 'Mexican Exchange',
            'IL' => 'London IL',
            'CC' => 'Cryptocurrencies',
            'COMM' => 'Commodities',
            'INDX' => 'Indexes',
            'FOREX' => 'FOREX',
            'TW' => 'Taiwan Exchange',
        ];
    }

}