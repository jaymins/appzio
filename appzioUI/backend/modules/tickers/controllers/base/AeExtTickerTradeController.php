<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\tickers\controllers\base;

use backend\controllers\CrudBaseController;
use backend\modules\tickers\models\AeExtTickerDaily as TickerDailyModel;
use backend\modules\tickers\models\AeExtTickerNotification;
use backend\modules\tickers\models\AeExtTickerTrade;
use backend\modules\tickers\models\AeNotification;
use backend\modules\tickers\search\AeExtTickerTrade as AeExtTickerTradeSearch;
use dmstr\bootstrap\Tabs;
use Yii;
use yii\helpers\Url;
use yii\web\HttpException;

/**
 * AeExtTickerTradeController implements the CRUD actions for AeExtTickerTrade model.
 */
class AeExtTickerTradeController extends CrudBaseController
{

    protected $gid = 2;

    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all AeExtTickerTrade models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new AeExtTickerTradeSearch;
        $dataProvider = $searchModel->search($_GET);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }

    /**
     * Displays a single AeExtTickerTrade model.
     * @param string $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new AeExtTickerTrade model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new AeExtTickerTrade;

        try {

            if ( \Yii::$app->request->isPost AND $model->load($_POST) ) {

                if ( !isset($model->active) )
                    $model->active = 1;
                
                if ($model->save()) {

                    // Initial push notifications
                    if ( $model->buy_range_from > 0.1 ) {
                        $ticker_name = $model->ticker->ticker;

                        $subject = 'New current trade';
                        $message = $ticker_name. ' has been added to ProficientTrader';
                        $this->sendPushes( $subject, $message, $model->id, 1 );
                    }

                    return $this->redirect(['view', 'id' => $model->id]);
                } elseif (!\Yii::$app->request->isPost) {
                    $model->load($_GET);
                }

            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }

        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }

        return $this->render('create', ['model' => $model]);
    }

    /**
     * Updates an existing AeExtTickerTrade model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        $original_data = [
            $model->buy_range_from,
            $model->buy_range_to,
            $model->sell_range_from,
            $model->sell_range_to,
            $model->trade_notes,
        ];

        $state = $model->active;

        if ( \Yii::$app->request->isPost AND $model->load($_POST) ) {

            $state_after_update = $model->active;

            $ticker_name = $model->ticker->ticker;

            // Compare the ticker's status ( active/inactive )
            if ( $state == 1 AND $state_after_update == 0 ) {
                $subject = 'Current trade moving to past trade';
                $message = $ticker_name . ' moved to Past Trade';
                $this->sendPushes( $subject, $message, $id, 2 );

                // Set the lock date
                $model->stop_date = time();
            }

            $updated_data = [
                $model->buy_range_from,
                $model->buy_range_to,
                $model->sell_range_from,
                $model->sell_range_to,
                $model->trade_notes,
            ];

            // Compare the ticker's initial values
            if ( array_diff($original_data, $updated_data) ) {
                $subject = 'Edited stock';
                $message = 'Update on ' . $ticker_name;
                $this->sendPushes( $subject, $message, $id, 3 );
            }

            if ( !$model->active ) {
                $this->setATickerLock( $model->ticker_id, $model->id );
            }

            if ( $model->save() ) {
                return $this->redirect(Url::previous());
            } else {
                return $this->render('update', [
                    'model' => $model
                ]);
            }
        } else {
            return $this->render('update', [
                'model' => $model
            ]);
        }

    }

    /**
     * Deletes an existing AeExtTickerTrade model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

// TODO: improve detection
        $isPivot = strstr('$id', ',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
     * Finds the AeExtTickerTrade model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return AeExtTickerTrade the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AeExtTickerTrade::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }

    protected function sendPushes($subject, $message, $trade_id, $type)
    {
        $users = $this->getAllUsers();

        if (empty($users)) {
            return false;
        }

        foreach ($users as $user) {

            if (
                (isset($user['purchase_monthly']) AND $user['purchase_monthly']) OR
                (isset($user['purchase_yearly']) AND $user['purchase_yearly'])
            ) {
                $notification_id = $this->addNotification($user['play_id'], $subject, $message, 0, $this->gid);

                $ticker_notifications = new AeExtTickerNotification();
                $ticker_notifications->trade_id = $trade_id;
                $ticker_notifications->play_id = $user['play_id'];
                $ticker_notifications->notification_id = $notification_id;
                $ticker_notifications->date = time();
                $ticker_notifications->type = $type;
                $ticker_notifications->status = 1;
                $ticker_notifications->save(false);
            }

        }

        return true;
    }

    protected function getAllUsers()
    {
        $connection = Yii::$app->getDb();

        $sql = "SELECT * FROM ae_game_variable
                WHERE ae_game_variable.game_id = $this->gid";

        $command = $connection->createCommand($sql);
        $vars = $command->queryAll();
        $var_array = array();

        foreach($vars as $var){
            if(isset($var['name']) AND isset($var['id'])){
                $name = $var['name'];
                $var_array[$name] = $var['id'];

            }
        }
        
        $monthly = isset($var_array['purchase_monthly']) ? $var_array['purchase_monthly'] : false;
        $yearly = isset($var_array['purchase_yearly']) ? $var_array['purchase_yearly'] : false;

        $sql = "SELECT *, play_vars.play_id AS play_id, monthly.`value` as purchase_monthly,yearly.`value` as purchase_yearly FROM
                ae_game_play_variable AS play_vars
                LEFT JOIN ae_game_play_variable AS monthly ON monthly.variable_id = '$monthly' AND play_vars.play_id = monthly.play_id
                LEFT JOIN ae_game_play_variable AS yearly ON yearly.variable_id = '$yearly' AND play_vars.play_id = yearly.play_id
                WHERE monthly.`value` = 1 OR yearly.`value`
                GROUP BY play_vars.play_id
                ";

        $command = $connection->createCommand($sql);
        $plays = $command->queryAll();

        return $plays;

    }

    protected function addNotification($play_id, $subject, $msgtext, $badge_count = 0, $app_id = 0, $parameters = array())
    {
        $notifications = new AeNotification();
        $notifications->id_channel = 1;
        $notifications->app_id = $app_id;
        $notifications->play_id = $play_id;
        $notifications->subject = $subject;
        $notifications->message = $msgtext;
        $notifications->type = 'push';
        $notifications->parameters = ($parameters ? json_encode($parameters) : false);
        $notifications->badge_count = $badge_count;
        $notifications->save(false);

        return $notifications->id;
    }

    protected function setATickerLock($ticker_id, $trade_id)
    {

        $daily_entry = TickerDailyModel::find()
            ->where([
                'ticker_id' => $ticker_id,
            ])
            ->orderBy('id DESC')
            ->one();

        if (empty($daily_entry)) {
            return false;
        }

        $daily_entry->ref_lock = $trade_id;
        $daily_entry->update();

        return true;
    }

}