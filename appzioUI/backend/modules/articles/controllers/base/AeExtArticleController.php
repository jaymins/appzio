<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\articles\controllers\base;

use backend\controllers\CrudBaseController;
use backend\modules\articles\models\AeExtArticle;
use backend\modules\articles\models\AeExtArticleTemplate as ArticleTemplates;
use backend\modules\articles\search\AeExtArticle as AeExtArticleSearch;
use dmstr\bootstrap\Tabs;
use Yii;
use yii\helpers\Url;
use yii\web\HttpException;

/**
 * AeExtArticleController implements the CRUD actions for AeExtArticle model.
 */
class AeExtArticleController extends CrudBaseController
{


    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all AeExtArticle models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new AeExtArticleSearch;
        $dataProvider = $searchModel->search($_GET);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }

    /**
     * Displays a single AeExtArticle model.
     * @param string $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new AeExtArticle model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new AeExtArticle;

        if (isset($_GET['exact-copy'])) {
            $article = AeExtArticle::findOne($_GET['id']);

            if (empty($article)) {
                return $this->redirect(Url::previous());
            }
            
            $original_data = $article->attributes;

            unset($original_data['id']);
            $original_data['title'] = $this->generateArticleTitle($article->title);
            $original_data['article_date'] = date('Y-m-d H:i:s');

            $clone = new AeExtArticle;
            $clone->attributes = $original_data;
            $clone->save();

            \Yii::$app->session['__crudReturnUrl'] = Url::previous();
            Url::remember();
            Tabs::rememberActiveState();

            return $this->render('view', [
                'model' => $this->findModel($clone->id),
            ]);
        }

        if ($post_data = Yii::$app->request->post('outer-group')) {
            // Format the submitted data so it's safe for storing
            $model->content = $this->formatContentForStorage($post_data);
            $_POST['AeExtArticle']['content'] = $model->content;
        }

        try {
            if ($model->load($_POST) && $model->save()) {
                return $this->redirect(['view', 'id' => $model->id]);
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }

        return $this->render('create', [
            'model' => $model,
            'images' => [],
            'images_tags' => [],
            'article_templates' => $this->getArticleTemplates(),
        ]);
    }

    /**
     * Updates an existing AeExtArticle model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {

        $article = new AeExtArticle;

        $model = $article::find()
            ->joinWith(['aeExtArticlePhotos'])
            ->where([
                'ae_ext_article.id' => $id
            ])->one();

        // This would convert the saved article's content
        // Into a repeater-friendly JSON

        $model->content = $this->convertContentToJSON($model->content);

        if ($post_data = Yii::$app->request->post('outer-group')) {
            // Format the submitted data so it's safe for storing
            $model->content = $this->formatContentForStorage($post_data);
            $_POST['AeExtArticle']['content'] = $model->content;
        }

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
                'images' => $model->aeExtArticlePhotos,
                'images_tags' => $this->getImagesTags($model->aeExtArticlePhotos),
                'article_templates' => $this->getArticleTemplates(),
            ]);
        }

    }

    /**
     * Deletes an existing AeExtArticle model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

        // TODO: improve detection
        $isPivot = strstr('$id', ',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
     * Finds the AeExtArticle model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return AeExtArticle the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AeExtArticle::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }

    /*
    * To do: make some nice manupulations here
    */
    private function convertContentToJSON($content)
    {
        $data = @json_decode($content, true);

        if (empty($data)) {
            return $content;
        }

        $output = [];

        foreach ($data as $i => $entry) {
            $type = $entry['type'];
            $output[$i]['field-type'] = $type;

            switch ($type) {
                case 'template':

                    $output[$i]['field-input-template'] = $entry['content'];

                    if (isset($entry['styles']) AND $entry['styles']) {
                        $output[$i]['field-template-styles'] = $this->converArrayToString($entry['styles']);
                    }

                    break;

                case 'text':

                    $output[$i]['field-input'] = $entry['content'];

                    if (isset($entry['styles']) AND $entry['styles']) {
                        $output[$i]['field-styles-text'] = $this->converArrayToString($entry['styles']);
                    }

                    if (isset($entry['params']['link']) AND $entry['params']['link']) {
                        $output[$i]['field-link'] = $entry['params']['link'];
                    }

                    break;

                case 'richtext':
                case 'wraprow':

                    if (isset($entry['content']) AND is_array($entry['content'])) {
                        $output[$i]['inner-group'] = $this->getInnerGroup($entry['content']);
                    }

                    if (isset($entry['styles']) AND $entry['styles']) {
                        $output[$i]['field-styles'] = $this->converArrayToString($entry['styles']);
                    }

                    if (isset($entry['params']['link']) AND $entry['params']['link']) {
                        $output[$i]['field-link'] = $entry['params']['link'];
                    }

                    break;

                case 'notes_box':

                    $output[$i]['field-notes-content'] = $entry['content'];

                    if (isset($entry['styles']) AND $entry['styles']) {
                        $output[$i]['field-styles'] = $this->converArrayToString($entry['styles']);
                    }

                    break;

                case 'QAsection':
                    $output[$i]['field-qa-question'] = $entry['question'];
                    $output[$i]['field-qa-answer'] = $entry['answer'];
                    break;

                case 'blockquote':
                    $output[$i]['field-blockquote'] = $entry['content'];
                    break;

                case 'image':
                    $output[$i]['field-image-id'] = $entry['image_id'];
                    break;

                case 'video':
                    $output[$i]['field-video-link'] = $entry['video_link'];
                    break;

                case 'gallery':
                    $output[$i]['field-gallery-id'] = $entry['ref'];
                    break;

            }

        }

        return json_encode($output);
    }

    private function converArrayToString($data)
    {
        $output = '';

        foreach ($data as $key => $value) {
            $output .= $key . ': ' . $value;
            $output .= '; ';
        }

        return trim($output);
    }

    private function formatContentForStorage($data)
    {

        $output = [];

        // We set an external counter
        // As the $data order depends on the indexes of the repeater fields
        $i = 0;

        foreach ($data as $item) {

            if (!isset($item['field-type'])) {
                continue;
            }

            $type = $item['field-type'];
            $output[$i]['type'] = $item['field-type'];

            switch ($type) {
                case 'template':

                    // Currently we support only TEXT templates
                    $output[$i]['subtype'] = 'text';

                    if (isset($item['field-input-template']) AND !empty($item['field-input-template'])) {
                        $output[$i]['content'] = $item['field-input-template'];
                    }

                    if (isset($item['field-template-styles']) AND !empty($item['field-template-styles'])) {
                        $output[$i]['styles'] = $this->convertStringToArray($item['field-template-styles']);
                    }

                    break;

                case 'text':

                    if (isset($item['field-input']) AND !empty($item['field-input'])) {
                        $output[$i]['content'] = $item['field-input'];
                    }

                    if (isset($item['field-styles-text']) AND !empty($item['field-styles-text'])) {
                        $output[$i]['styles'] = $this->convertStringToArray($item['field-styles-text']);
                    }

                    if (isset($item['field-link']) AND $item['field-link']) {
                        $output[$i]['params']['link'] = $item['field-link'];
                    }

                    break;

                case 'richtext':
                case 'wraprow':

                    if (
                        isset($item['inner-group']) AND
                        !empty($item['inner-group']) AND
                        is_array($item['inner-group'])
                    ) {
                        $output[$i]['content'] = $this->setInnerGroup($item['inner-group']);
                    }

                    if (isset($item['field-styles']) AND !empty($item['field-styles'])) {
                        $output[$i]['styles'] = $this->convertStringToArray($item['field-styles']);
                    }

                    if (isset($item['field-link']) AND $item['field-link']) {
                        $output[$i]['params']['link'] = $item['field-link'];
                    }

                    break;

                case 'notes_box':

                    $output[$i]['content'] = $item['field-notes-content'];

                    if (isset($item['field-styles']) AND !empty($item['field-styles'])) {
                        $output[$i]['styles'] = $this->convertStringToArray($item['field-styles']);
                    }

                    break;

                case 'QAsection':
                    $output[$i]['question'] = $item['field-qa-question'];
                    $output[$i]['answer'] = $item['field-qa-answer'];
                    break;

                case 'blockquote':
                    $output[$i]['content'] = $item['field-blockquote'];
                    break;

                case 'image':
                    $output[$i]['image_id'] = $item['field-image-id'];
                    break;

                case 'video':
                    $output[$i]['video_link'] = $item['field-video-link'];
                    break;

                case 'gallery':
                    $output[$i]['ref'] = $item['field-gallery-id'];
                    break;
            }

            $i++;

        }

        return json_encode($output);
    }

    private function getInnerGroup($content)
    {

        $output = [];

        foreach ($content as $i => $item) {
            $output[$i]['field-input-inner'] = $item['content'];

            if (isset($item['styles']) AND $item['styles']) {
                $output[$i]['field-styles-inner'] = $this->converArrayToString($item['styles']);
            }

            if (isset($item['params']['link']) AND $item['params']['link']) {
                $output[$i]['field-link-inner'] = $item['params']['link'];
            }

        }

        return $output;
    }

    private function setInnerGroup($content)
    {

        $output = [];

        foreach ($content as $i => $item) {
            $output[$i]['type'] = 'text';
            $output[$i]['content'] = (isset($item['field-input-inner']) ? $item['field-input-inner'] : '');

            if (isset($item['field-styles-inner']) AND $item['field-styles-inner']) {
                $output[$i]['styles'] = $this->convertStringToArray($item['field-styles-inner']);
            }

            if (isset($item['field-link-inner']) AND $item['field-link-inner']) {
                $output[$i]['params']['link'] = $item['field-link-inner'];
            }

        }

        return $output;
    }

    private function convertStringToArray($string)
    {
        $pieces = explode(';', $string);

        $output = [];

        foreach ($pieces as $item) {

            if (empty($item))
                continue;

            $item_pieces = explode(':', $item);

            if (!isset($item_pieces[1]))
                continue;

            $output[trim($item_pieces[0])] = trim($item_pieces[1]);
        }

        return $output;
    }

    private function getImagesTags($images)
    {

        if (empty($images)) {
            return [];
        }

        $tags = [];

        foreach ($images as $image) {
            $tags[] = $image->position;
        }

        return array_unique($tags);
    }

    private function getArticleTemplates()
    {
        $session = Yii::$app->session;
        $app_id = $session->get('app_id');

        $templates = new ArticleTemplates;

        if ($app_id) {
            $article_templates = $templates->findAll([
                'app_id' => $app_id
            ]);
        } else {
            $article_templates = $templates->find()->all();
        }

        return $article_templates;
    }

    private function generateArticleTitle(string $title)
    {
        if (stristr($title, '- copy-')) {
            $title = trim(preg_replace('~- copy-.*~', '', $title));
        }

        return $title . ' - copy-' . time();
    }

}